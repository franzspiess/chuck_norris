{"version":3,"sources":["infrastructure/martialActions.ts","infrastructure/roundHouseReducer.ts","infrastructure/customHook.ts","components/containers/Container.tsx","components/representational/Loader.tsx","components/representational/FactDisplay.tsx","components/representational/Search.tsx","components/containers/FactHandler.tsx","components/representational/ErrorDisplay.tsx","components/containers/Box.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypes","initState","loading","chuckJoke","errorMessage","undefined","roundHouseReducer","state","action","type","FETCHING","FINISHED","payload","ERROR","message","apiRoutes","useFetchChuck","useReducer","dispatch","useCallback","searchString","fetchAction","route","appendRandom","appendSearchString","length","getRoute","fetch","then","response","json","parsedData","result","joke","Math","floor","random","value","Error","getJokeFromResponse","catch","error","Container","children","className","Loader","color","height","width","timeout","FactDisplay","id","Search","fetchChuck","React","useState","setSearchString","onChange","event","currentTarget","autoFocus","onClick","FactHandler","ErrorDisplay","Box","style","justifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.b42dbc96.chunk.js","sourcesContent":["export enum ActionTypes {\n  FETCHING = 'FETCHING',\n  FINISHED = 'FINISHED',\n  ERROR = 'ERROR'\n}\n\nexport const fetchAction = (searchString?:string) : IAction  => ({\n  type: ActionTypes.FETCHING,\n  searchString\n})\n\nexport const fetchFinishedAction = (payload:any) :IAction => ({\n  type: ActionTypes.FINISHED,\n  payload\n})\n\nexport const fetchErrorAction = (message:string) : IAction => ({\n  type: ActionTypes.ERROR,\n  message\n})\n\nexport interface IAction {\n  type:ActionTypes\n  searchString?: string\n  payload?: string\n  message?: string\n}\n","import { IAction, ActionTypes } from './martialActions';\n\nexport const initState: IState = {\n  loading: false,\n  chuckJoke: 'Chuck Norris once fetched a joke by roundhouse kicking a button.',\n  errorMessage: undefined\n};\n\nexport function roundHouseReducer(state: IState = initState, action: IAction) {\n  switch (action.type) {\n    case (action.type = ActionTypes.FETCHING):\n      return {\n        ...state,\n        loading: true,\n      };\n    case (action.type = ActionTypes.FINISHED):\n      return {\n        ...state,\n        loading:false,\n        chuckJoke:action.payload\n      }\n    case (action.type = ActionTypes.ERROR):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.message\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport interface IState {\n  loading: boolean;\n  chuckJoke?: string;\n  errorMessage?: string\n}\n","import { useReducer, useCallback } from 'react';\nimport { roundHouseReducer, initState, IState } from './roundHouseReducer';\nimport { fetchAction, fetchFinishedAction, fetchErrorAction } from './martialActions';\n\nconst apiRoutes = {\n  baseUrl: 'https://api.chucknorris.io/jokes',\n  appendRandom: '/random',\n  appendSearchString: '/search?query=',\n};\n\nexport default function useFetchChuck(): [\n  IState,\n  (searchString: string) => void\n] {\n  const [state, dispatch] = useReducer(roundHouseReducer, initState);\n  const fetchChuck = useCallback((searchString: string) => {\n    dispatch(fetchAction());\n    const route = getRoute(searchString);\n    fetch(route)\n      .then((response) => response.json())\n      .then((parsedData) => getJokeFromResponse(parsedData))\n      .then((joke) => dispatch(fetchFinishedAction(joke)))\n      .catch(error => fetchErrorAction(error.message) )\n  }, []);\n\n  return [state, fetchChuck];\n}\n\nfunction getRoute(searchString: string) {\n  const { baseUrl, appendRandom, appendSearchString } = apiRoutes;\n\n  return (\n    baseUrl +\n    (searchString.length > 3 ? appendSearchString + searchString : appendRandom)\n  );\n}\nfunction getJokeFromResponse(parsedData: IServerResult | IJoke) {\n  if ('result' in parsedData) {\n    const {result} = parsedData\n    const joke = result[Math.floor(result.length*Math.random())]\n    return joke?.value  || 'No joke found for your query.'\n  }\n  if ('value' in parsedData) {\n    return parsedData.value\n  }\n  throw new Error('Unknown Fornat')\n}\n\ninterface IServerResult {\n  result: IJoke[];\n}\n\ninterface IJoke {\n  value: string;\n}\n","import React, { ReactNode } from 'react'\n\nexport default function Container({ children } : {children:ReactNode}) {\n  return (\n    <div className=\"container\">\n      {children}\n    </div>\n  )\n\n}","import React from 'react'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Spinner from 'react-loader-spinner'\n\nexport default function Loader() {\n  return (<Spinner\n    type='Bars'\n    color='#00BFFF'\n    height={100}\n    width={100}\n    timeout={1000000}\n    />)\n}","import React from 'react'\nimport { IState } from '../../infrastructure/roundHouseReducer';\n\nexport default function FactDisplay ({\n  chuckJoke\n} : {\n    chuckJoke:IState['chuckJoke']\n  }) {\n    return (\n      <div>\n        <p id='chuck-joke'>{chuckJoke}</p>\n      </div>\n    )\n}","import React from 'react'\nimport {IBoxProps} from '../containers/Box'\n\n\nexport default function Search ({\n  fetchChuck\n} : {\n  fetchChuck: IBoxProps['fetchChuck']\n}) {\n  const [searchString, setSearchString] = React.useState('')\n  const handleChange = (event:React.FormEvent<HTMLInputElement>) => {\n    setSearchString(event.currentTarget.value)\n  }\n  return (\n    <div className='search-box'>\n      <input\n        value={searchString}\n        onChange={handleChange}\n        autoFocus\n      />\n      <button\n        onClick={() => {\n          fetchChuck(searchString)\n          setSearchString('')\n        }}\n      >{ searchString.length ?\n        'SEARCH' :\n        'RANDOM JOKE'\n      }\n        </button>\n    </div>\n  )\n}","import React from 'react'\nimport FactDisplay from '../representational/FactDisplay'\nimport Search from '../representational/Search'\nimport { IState } from '../../infrastructure/roundHouseReducer'\nimport { IBoxProps } from './Box'\n\nexport default function FactHandler({\n  chuckJoke,\n  fetchChuck\n}: {\n  chuckJoke: IState['chuckJoke'],\n  fetchChuck: IBoxProps['fetchChuck']\n}) {\n  return (\n    <>\n      <FactDisplay chuckJoke={chuckJoke} />\n      <Search fetchChuck={fetchChuck} />\n    </>\n  )\n}","import React from 'react'\n\nexport default function ErrorDisplay(\n  {errorMessage}:{errorMessage:string}) {\n    return (\n      <div>\n        <p>{errorMessage}</p>\n      </div>\n    )\n}","import React from 'react'\nimport { IState } from '../../infrastructure/roundHouseReducer'\nimport Loader from '../representational/Loader'\nimport FactHandler from './FactHandler'\nimport ErrorDisplay from '../representational/ErrorDisplay'\n\nexport default function Box({\n  state: {\n    chuckJoke,\n    loading,\n    errorMessage\n  },\n  fetchChuck\n}: IBoxProps) {\n  function determineRender () {\n    if (loading) return (<Loader />)\n    if (errorMessage) return (<ErrorDisplay  errorMessage={errorMessage}/>)\n    return (<FactHandler chuckJoke={chuckJoke} fetchChuck={fetchChuck} />)\n  }\n  return (\n    <div className=\"box\" style={{\n      justifyContent: loading ? 'center' : 'space-evenly'\n    }}>\n      {determineRender()}\n    </div>\n  )\n}\n\nexport interface IBoxProps {\n  state: IState\n  fetchChuck: (searchString: string) => void\n}","import React from 'react'\nimport './App.css'\nimport useFetchChuck from './infrastructure/customHook'\nimport Container from './components/containers/Container'\nimport Box from './components/containers/Box'\n\nfunction App() {\n  const [state, fetchChuck] = useFetchChuck()\n  return (\n    <Container>\n      <Box\n        state={state}\n        fetchChuck={fetchChuck}\n        />\n    </Container >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}